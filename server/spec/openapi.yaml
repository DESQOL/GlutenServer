openapi: 3.0.2

info:
  title: GlutenServer API spec
  version: 0.0.1

servers:
  - url: 'https://desqol.hihva.nl'
    description: Main (production) server

security:
  # Either key can be used (as in logical OR)
  - ApiKeyAuth: []
  - ApiKeyQueryAuth:  []

paths:
  /recipe/all:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  total:
                    type: integer
                  recipes:
                    $ref: '#/components/schemas/ArrayOfRecipes'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /recipe/autocomplete:
    get:
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
            minLength: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfRecipes'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /recipe/search:
    get:
      parameters:
        - in: query
          name: limit
          required: true
          schema:
            type: integer
        - in: query
          name: offset
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  total:
                    type: integer
                  recipes:
                    $ref: '#/components/schemas/ArrayOfRecipes'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /recipe/{recipeId}/comments:
    get:
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                comment:
                  type: string
                rating:
                  type: integer
              required:
                - comment
                - rating
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /recipe/{recipeId}:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /user/favorites:
    get:
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /user/login:
    post:
      security: []
      requestBody:
        $ref: '#/components/requestBodies/Login'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Not authenticated
        '404':
          description: User not found
  /user/profile:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/register:
    post:
      security: []
      requestBody:
        $ref: '#/components/requestBodies/Register'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  # Reusable schemas (data models)
  schemas:
    ArrayOfRecipes:
      type: array
      items:
        $ref: '#/components/schemas/Recipe'
    ArrayOfUsers:
      type: array
      items:
        $ref: '#/components/schemas/User'
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        recipeIngredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
    Ingredient:
      type: object
      properties:
        id:
          type: integer
        product:
          $ref: '#/components/schemas/Product'
        amount:
          type: string
        recipe:
          $ref: '#/components/schemas/Recipe'
    Recipe:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        image:
          type: string
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
        duration:
          type: string
        rating:
          type: number
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
  
  # Security scheme definitions (see Authentication)
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    ApiKeyQueryAuth:
      type: apiKey
      in: query
      name: api_key

  # Reusable request bodies
  requestBodies:
    Login:
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              email:
                type: string
              password:
                type: string
            required:
              - email
              - password
    Register:
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              name:
                type: string
              email:
                type: string
              password:
                type: string
            required:
              - name
              - email
              - password

  # Reusable responses, such as 401 Unauthorized or 400 Bad Request
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
